use select::document::Document;
use select::predicate::{Class, Name};
use std::error::Error;
use select::predicate::Predicate;

#[tokio::main]
async fn main() -> Result<(), Box<dyn Error>> {
    let url = "https://ctftime.org/event/list/upcoming";
    let response = reqwest::get(url).await?.text().await?;

    let document = Document::from(response.as_str());
    let events = document
        .find(Name("table").and(Class("table")).child(Name("tbody")).child(Name("tr")))
        .map(|row| {
            let columns = row.find(Name("td")).collect::<Vec<_>>();
            (
                columns[0].text(),
                columns[1].text(),
                columns[2].text(),
                columns[3].text(),
                columns[4].text(),
            )
        })
        .collect::<Vec<_>>();

    println!("{:<10} {:<30} {:<30} {:<20} {}", "Rank", "Name", "Start time", "Finish time", "Location");
    for event in events {
        println!("{:<10} {:<30} {:<30} {:<20} {}", event.0, event.1, event.2, event.3, event.4);
    }

    Ok(())
}
