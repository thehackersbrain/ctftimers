use scraper::{Html, Selector};
use std::error::Error;
use tabled::{Disable, Style, Table};
use tokio;

#[tokio::main]
async fn main() -> Result<(), Box<dyn Error>> {
    // set the User-Agent header to avoid 403 error
    let client = reqwest::Client::builder()
        .user_agent(
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 \
            (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
        )
        .build()?;
    let url = "https://ctftime.org/event/list/upcoming";
    let response = client.get(url).send().await?.text().await?;
    let document = Html::parse_document(&response);
    let table_selector = Selector::parse("table").unwrap();
    let table = document.select(&table_selector).next().unwrap();
    let row_selector = Selector::parse("tr").unwrap();
    let column_selector = Selector::parse("td").unwrap();
    let mut data = vec![];
    for row in table.select(&row_selector).skip(1) {
        let mut row_data = vec![];
        for column in row.select(&column_selector) {
            row_data.push(column.text().collect::<String>().trim().to_string());
        }
        data.push(row_data);
    }
    let mut table = Table::new(data)
        .with(Disable::Row(0))
        .with(Style::thin())
        .with(Style::header())
        .with(Style::blank_border())
        .with(Style::fix_width(60))
        .with(Style::ContentAlignment::center());
    table.set_title(String::from("CTFTime Upcoming Event"));
    println!("{}", table);

    Ok(())
}
